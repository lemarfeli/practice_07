import string  # –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫–æ–º–Ω–∞—Ç—ã
import random

import telebot
from telebot import types
bot = telebot.TeleBot('6813501562:AAF3-i5zM2LgbO_mpdy4yRYW4mr8Z0wtKic')

#'7070533359:AAGUwBLIkXmrdD9ebAIm4WRb8QUHhFiIfvo'

from bd import SqlDB
SqlDB = SqlDB()

room_registration = {}
room_inf = {}
player = {}
player_id = {}
wish = {}
wish_id = {}


@bot.message_handler(commands=['start'])
def start(message):
    if not SqlDB.exists_user(message.from_user.id):
        SqlDB.add_new_user(message.from_user.id)

    first_mess = f"""–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>!\n
–Ø - —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫! –ú–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–≥—Ä—É —á–µ—Å—Ç–Ω–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ.\n
–ò–≥—Ä–∞–π –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, —Å–µ–º—å–µ–π, –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, —Å–æ –≤—Å–µ–º–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞–¥–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–π —Å—É–µ—Ç—ã!\n
–ë—É–¥—É —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º\n
–û—Ç–ª–∏—á–Ω–æ–π –∏–≥—Ä—ã:)"""
    
    bot.send_message(message.chat.id, first_mess, parse_mode='html', reply_markup=main_markup())


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n" \
                "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @alekatya"

    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['rules'])
def rules_command(message):
    rules_text = "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!üéÖüèª\n" \
                 "  1. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ–π –≤–∏—à-–ª–∏—Å—Ç\n" \
                 "  2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞\n" \
                 "  3. –ö–∞–∂–¥—ã–π –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π. –ò–≥—Ä–æ–∫—É –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –≤–∏—à-–ª–∏—Å—Ç –µ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ\n" \
                 "  4. –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç, –ø–æ–∫—É–ø–∞–µ—Ç –∏ –∑–∞–ø–æ–∫–æ–≤—ã–≤–∞–µ—Ç –∂–µ–ª–∞–µ–º—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –≤–∏—à-–ª–∏—Å—Ç–∞ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ\n" \
                 "  5. –í –∑–∞–≤–∏–º–∏—Å–æ—Ç–∏ –æ—Ç –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –≤—ã—Å—ã–ª–∞–µ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ—Å—å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n" \
                 "  6. –î–∞—Ä–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫\n" \
                 "  7. –ü–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã\n\n" \
                 "–•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!‚ú®"

    bot.send_message(message.chat.id, rules_text)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global delete_markup
    delete_markup = telebot.types.ReplyKeyboardRemove()

    room_registration[message.chat.id] = {}
    room_inf[message.chat.id] = {}
    wish[message.chat.id] = {}
    wish_id[message.chat.id] = {}
    player[message.chat.id] = {}
    player_id[message.chat.id] = {}
    
    if message.text == '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É':
        markup_room_name = types.ReplyKeyboardMarkup(resize_keyboard=True)
        name_1 = types.KeyboardButton('–¢–µ—Å—Ç –∏–≥—Ä—ã‚öôÔ∏è')
        name_2 = types.KeyboardButton('–î—Ä—É–∑—å—èü§©')
        name_3 = types.KeyboardButton('–ö–æ–ª–ª–µ–≥–∏üìö')
        name_4 = types.KeyboardButton('–û–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∏üòé')
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')

        markup_room_name.row(name_1, name_2).row(name_3, name_4).add(back)
        bot.send_message(message.chat.id, '–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                         parse_mode='html', reply_markup=markup_room_name)

        bot.register_next_step_handler(message, room_reg_name)

    elif message.text == '–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É':
        bot.send_message(message.chat.id,
                         '–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –Ω–µ–µ', parse_mode='html',
                         reply_markup=delete_markup)
        bot.register_next_step_handler(message, enter_room)
        
    elif message.text == '–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã':
        rooms = SqlDB.get_user_rooms(message.from_user.id)
        if rooms:
            bot.send_message(message.chat.id, '–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö:', reply_markup=create_rooms_buttons(rooms, message.chat.id))
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É".')

    elif message.text == '–í–∏—à –ª–∏—Å—Ç':
        if not SqlDB.check_wish(message.from_user.id):
            delete_markup = telebot.types.ReplyKeyboardRemove()
            wish[message.chat.id]['check'] = "global"
            bot.send_message(message.chat.id,
                             '–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –í–∏—à –ª–∏—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –í–∞—à –≤–∏—à –ª–∏—Å—Ç', parse_mode='html',
                             reply_markup=delete_markup)
            bot.register_next_step_handler(message, wishlist)
        else:
            bot.send_message(message.chat.id, "–í–∞—à –≤–∏—à –ª–∏—Å—Ç:", reply_markup=create_buttons(message.from_user.id, "global:"))

    elif message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=main_markup())
    else:
        # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(message.chat.id, '—è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é', parse_mode='html', reply_markup=main_markup())


def create_buttons(user_id, word):
    wishlist_data = SqlDB.select_wishlist(user_id)
    keyboard = types.InlineKeyboardMarkup()
    for wish_item in wishlist_data:
        keyboard.add(types.InlineKeyboardButton(text=wish_item[2], callback_data=str(word)+str(wish_item[0])))
    keyboard.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data=str(word)+'add'))
    
    return keyboard


def create_rooms_buttons(rooms, userid):
    keyboard = types.InlineKeyboardMarkup()
    for room in rooms:
        room_id = room[0]
        room_name = room[1]
        player_inf = room[3]
        if room[2] == userid:
            # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
            organizer_button_text = f"{room_name} (–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)"
            organizer_callback_data = f"organizer:{room_id}"
            keyboard.add(types.InlineKeyboardButton(text=organizer_button_text, callback_data=organizer_callback_data))
        # –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant_button_text = f"{room_name} (–£—á–∞—Å—Ç–Ω–∏–∫)"
        participant_callback_data = f"participant:{player_inf}"
        keyboard.add(types.InlineKeyboardButton(text=participant_button_text, callback_data=participant_callback_data))

    return keyboard


def main_markup():
    markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b_create_room = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É')
    b_enter_room = types.KeyboardButton('–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É')
    b_my_rooms = types.KeyboardButton('–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã')
    b_wishlist = types.KeyboardButton('–í–∏—à –ª–∏—Å—Ç')
    markup_main.add(b_create_room).add(b_enter_room).add(b_my_rooms).add(b_wishlist)
    
    return markup_main
    

def room_reg_name(message):
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=main_markup())
    else:
        char = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–ª—é—á–µ
        room_key = ''.join(random.choices(string.ascii_letters + string.digits, k=char))
        room_registration[message.chat.id]['roomid'] = room_key  # –∫–ª—é—á
        room_registration[message.chat.id]['name'] = message.text

        global markup_anonymity

        markup_anonymity = types.ReplyKeyboardMarkup(resize_keyboard=True)
        anonym = types.KeyboardButton('–ê–Ω–æ–Ω–∏–º–Ω–∞—è')
        public = types.KeyboardButton('–ü—É–±–ª–∏—á–Ω–∞—è')
        markup_anonymity.row(anonym, public)

        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∏–ª–∏ –ø—É–±–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞? ', reply_markup=markup_anonymity)
        bot.register_next_step_handler(message, room_anonymity)


def room_anonymity(message):
    global markup_anonymity
    if message.text == '–ê–Ω–æ–Ω–∏–º–Ω–∞—è' or message.text == '–ü—É–±–ª–∏—á–Ω–∞—è':
        if message.text == '–ê–Ω–æ–Ω–∏–º–Ω–∞—è':
            room_registration[message.chat.id]['anonymity'] = True
        elif message.text == '–ü—É–±–ª–∏—á–Ω–∞—è':
            room_registration[message.chat.id]['anonymity'] = False
        global markup_currency

        markup_currency = types.ReplyKeyboardMarkup(resize_keyboard=True)
        rub = types.KeyboardButton('‚ÇΩ')
        eur = types.KeyboardButton('‚Ç¨')
        usd = types.KeyboardButton('$')
        kzt = types.KeyboardButton('‚Ç∏')

        markup_currency.row(rub, eur, usd, kzt)

        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±—é–¥–∂–µ—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤',
                         reply_markup=markup_currency)
        bot.register_next_step_handler(message, currency_budget)
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')
        bot.send_message(message.chat.id,
                         '–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∏–ª–∏ –ø—É–±–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞?', parse_mode='html', reply_markup=markup_anonymity)
        bot.register_next_step_handler(message, room_anonymity)


def currency_budget(message):
    room_registration[message.chat.id]['budget'] = message.text

    global markup_budget

    markup_budget = types.ReplyKeyboardMarkup(resize_keyboard=True)
    budget_300 = types.KeyboardButton('300')
    budget_500 = types.KeyboardButton('500')
    budget_1000 = types.KeyboardButton('1000')
    budget_1500 = types.KeyboardButton('1500')

    markup_budget.row(budget_300, budget_500).row(budget_1000, budget_1500)

    bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —á–∞—Å—Ç—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–∏–º–∏—Ç –≤ —Ä—É–±–ª—è—Ö.', reply_markup=markup_budget)
    bot.register_next_step_handler(message, room_budget)


def room_budget(message):
    global markup_budget

    try:
        budget = float(message.text.replace(',', '.'))
        if budget.is_integer():
            budget = int(budget)
        if budget <= 0:
            raise Exception
        room_registration[message.chat.id]['budget'] = str(budget) + ' ' +room_registration[message.chat.id]['budget']
        bot.send_message(message.chat.id, f"–°—É–º–º–∞ {budget} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

        if room_registration[message.chat.id]['anonymity']:
            room_registration[message.chat.id]['sending'] = False
            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', reply_markup=delete_markup)
            bot.register_next_step_handler(message, room_meeting)
        else:
            global markup_sending

            markup_sending = types.ReplyKeyboardMarkup(resize_keyboard=True)
            post = types.KeyboardButton('–ü–æ—á—Ç–æ–π')
            ofline = types.KeyboardButton('–õ–∏—á–Ω–æ')
            # back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup_sending.add(post, ofline)  # .add(back)

            bot.send_message(message.chat.id,
                             '–í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –∏–ª–∏ –≤—Ä—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ?',
                             parse_mode='html',
                             reply_markup=markup_sending)
            bot.register_next_step_handler(message, room_sending)
    except Exception:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=markup_budget)
        bot.register_next_step_handler(message, room_budget)


def room_sending(message):
    global markup_sending
    if message.text == '–ü–æ—á—Ç–æ–π':
        room_registration[message.chat.id]['sending'] = True
        SqlDB.create_new_room(room_registration[message.chat.id]['roomid'], room_registration[message.chat.id]['name'],
                              room_registration[message.chat.id]['anonymity'], room_registration[message.chat.id]['budget'],
                              room_registration[message.chat.id]['sending'], None,
                              message.from_user.id)
        bot.send_message(message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                         reply_markup=main_markup())
    elif message.text == '–õ–∏—á–Ω–æ':
        room_registration[message.chat.id]['sending'] = False
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', reply_markup=delete_markup)
        bot.register_next_step_handler(message, room_meeting)

    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')
        bot.send_message(message.chat.id,
                         '–í—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –∏–ª–∏ –≤—Ä—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ?',
                         parse_mode='html',
                         reply_markup=markup_sending)
        bot.register_next_step_handler(message, room_sending)


def room_meeting(message):    
    room_registration[message.chat.id]['meeting'] = message.text
    SqlDB.create_new_room(room_registration[message.chat.id]['roomid'], room_registration[message.chat.id]['name'],
                          room_registration[message.chat.id]['anonymity'], room_registration[message.chat.id]['budget'],
                          room_registration[message.chat.id]['sending'], room_registration[message.chat.id]['meeting'],
                          message.from_user.id)
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                     reply_markup=main_markup())


def enter_room(message):
    if not SqlDB.exists_room(message.text):
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á')
        bot.register_next_step_handler(message, enter_room)
    else:
        if not SqlDB.exists_player_room(message.chat.id, message.text):
            roomid = message.text
            player[message.chat.id]['roomid'] = roomid
            if SqlDB.player_number(roomid) < 9:
                num = '0' + str(SqlDB.player_number(roomid) + 1)
            else:
                num = str(SqlDB.player_number(roomid) + 1)
            player[message.chat.id]['playerid'] = roomid + "_" + num

            bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
            bot.register_next_step_handler(message, player_name)
        else:
            bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É', reply_markup=main_markup())


def player_name(message):
    player[message.chat.id]['name'] = message.text
    room_info = SqlDB.room_info(player[message.chat.id]['roomid'])
    if room_info[0][4]:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        bot.register_next_step_handler(message, player_address)
    else:
        player[message.chat.id]['address'] = None
        SqlDB.add_new_player(player[message.chat.id]['playerid'], message.from_user.id,
                             player[message.chat.id]['roomid'], player[message.chat.id]['name'],
                             player[message.chat.id]['address'])
        if not SqlDB.check_wish(message.from_user.id):
            delete_markup = telebot.types.ReplyKeyboardRemove()
            wish[message.chat.id]['check'] = "local"
            bot.send_message(message.chat.id,
                             '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∞—à –≤–∏—à –ª–∏—Å—Ç', parse_mode='html',
                             reply_markup=delete_markup)
            bot.register_next_step_handler(message, wishlist)
        else:
            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫',
                             reply_markup=create_buttons(message.chat.id, "local:"))


def player_address(message):
    player[message.chat.id]['address'] = message.text
    SqlDB.add_new_player(player[message.chat.id]['playerid'], message.from_user.id,
                         player[message.chat.id]['roomid'], player[message.chat.id]['name'],
                         player[message.chat.id]['address'])
    if not SqlDB.check_wish(message.from_user.id):
        delete_markup = telebot.types.ReplyKeyboardRemove()
        wish[message.chat.id]['check'] = "local"
        bot.send_message(message.chat.id,
                         '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∞—à –≤–∏—à –ª–∏—Å—Ç', parse_mode='html',
                         reply_markup=delete_markup)
        bot.register_next_step_handler(message, wishlist)
    else:
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫',
                         reply_markup=create_buttons(message.chat.id, "local:"))


def wishlist(message):
    wish[message.chat.id]['wish'] = message.text
    markup_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup_skip.add(skip)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ ', reply_markup=markup_skip)
    bot.register_next_step_handler(message, wish_description)


def wish_description(message):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        wish[message.chat.id]['description'] = ""
    else:
        wish[message.chat.id]['description'] = message.text
    SqlDB.add_new_wish(message.from_user.id, wish[message.chat.id]['wish'], wish[message.chat.id]['description'])
    if wish[message.chat.id]['check'] == "local":
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫',
                         reply_markup=create_buttons(message.chat.id, "local:"))
    else:
        markup_wish = types.ReplyKeyboardMarkup(resize_keyboard=True)
        new_wish = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫')
        menu = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        markup_wish.add(new_wish).add(menu)
        bot.send_message(message.chat.id, f"–ü–æ–¥–∞—Ä–æ–∫: {wish[message.chat.id]['wish']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {wish[message.chat.id]['description']}\n–±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –≤–∏—à-–ª–∏—Å—Ç! –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=markup_wish)
        bot.register_next_step_handler(message, wish_menu)


def wish_menu(message):
    if message.text  == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫':
        wish[message.chat.id]['check'] = "global"
        bot.send_message(message.chat.id,f'–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∞—à –≤–∏—à-–ª–∏—Å—Ç')
        bot.register_next_step_handler(message, wishlist)
    elif message.text  == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(message.chat.id, f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é',
                         reply_markup=main_markup())


@bot.callback_query_handler(func=lambda call: call.data == "back")
def handle_back_button(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í–∞—à –≤–∏—à –ª–∏—Å—Ç:", reply_markup=create_buttons(call.message.chat.id, "global:"))
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "delete")
def handle_delete_button(call):
    SqlDB.delete_wish(wish_id[call.message.chat.id]["id"])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à –≤–∏—à –ª–∏—Å—Ç:",
                          reply_markup=create_buttons(call.message.chat.id, "global:"))
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.split(":")[1] == "add")
def handle_add_button(call):
    delete_markup = telebot.types.ReplyKeyboardRemove()
    wish[call.message.chat.id]['check'] = call.data.split(":")[0]
    bot.send_message(call.message.chat.id, f'–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∞—à –≤–∏—à-–ª–∏—Å—Ç', reply_markup=delete_markup)
    bot.register_next_step_handler(call.message, wishlist)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "edit")
def handle_edit_button(call):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ä–æ–∫", callback_data='present'))
    keyboard.add(types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='description'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                          reply_markup=keyboard)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'present' or call.data == 'description')
def handle_edit_select(call):
    if call.data == 'present':
        bot.send_message(call.message.chat.id, '–ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ')
        bot.register_next_step_handler(call.message, wish_update)
    else:
        bot.send_message(call.message.chat.id, '–ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ')
        bot.register_next_step_handler(call.message, description_update)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "global")
def handle_global_button(call):
    wish_id[call.message.chat.id]["id"] = call.data.split(":")[1]
    wishlist_data = SqlDB.select_wish(call.data.split(":")[1])
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete'))
    keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"–ü–æ–¥–∞—Ä–æ–∫: {wishlist_data[0][0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {wishlist_data[0][1]}",
                          reply_markup=keyboard)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "local")
def handle_local_button(call):
    wish_id[call.message.chat.id]["id"] = call.data.split(":")[1]
    SqlDB.add_new_local_wish(player[call.message.chat.id]['playerid'], wish_id[call.message.chat.id]["id"])
    wishlist_data = SqlDB.select_wish(call.data.split(":")[1])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"–ü–æ–¥–∞—Ä–æ–∫ {wishlist_data[0][0]} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏—à –ª–∏—Å—Ç")
    bot.send_message(call.message.chat.id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–Ω–∞—Ç–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=main_markup())
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "organizer")
def handle_organizer_button(call):
    pass


@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "participant")
def handle_participant_button(call):
    player[call.message.chat.id]["id"] = call.data.split(":")[1]
    room_registration[call.message.chat.id]["id"] = player[call.message.chat.id]["id"].split("_")[0]
    player[call.message.chat.id]["name"] = SqlDB.player_info(call.message.chat.id, room_registration[call.message.chat.id]["id"])[0][3]
    room_inf[call.message.chat.id] = SqlDB.room_info(room_registration[call.message.chat.id]["id"])[0]
    room_registration[call.message.chat.id]["name"] = room_inf[call.message.chat.id][1]
    room_registration[call.message.chat.id]["budget"] = room_inf[call.message.chat.id][3]
    room_registration[call.message.chat.id]["meeting"] = room_inf[call.message.chat.id][5]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"""–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: {room_registration[call.message.chat.id]['name']}
–ë—é–¥–∂–µ—Ç: {room_registration[call.message.chat.id]["budget"]}
–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {room_registration[call.message.chat.id]["meeting"]}
–í–∞—à–µ –∏–º—è: {player[call.message.chat.id]["name"]}""")


def wish_update(message):
    SqlDB.edit_wish(id[message.chat.id]["id"], "wish", message.text)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã ')
    bot.send_message(message.chat.id, "–í–∞—à –≤–∏—à –ª–∏—Å—Ç:", reply_markup=create_buttons(message.from_user.id, "global:"))

def description_update(message):
    SqlDB.edit_wish(id[message.chat.id]["id"], "description", message.text)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã ')
    bot.send_message(message.chat.id, "–í–∞—à –≤–∏—à –ª–∏—Å—Ç:", reply_markup=create_buttons(message.from_user.id, "global:"))

current_image_index = 0  # —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

def show_image(message, image_index):
    # –ø—É—Ç—å
    image_path = f".../{image_index}.jpg"  
    
    with open(image_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo)
    
    # –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥-–≤–ø–µ—Ä–µ–¥
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="prev"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next")
    )
    
    bot.send_message(message.chat.id, reply_markup=keyboard)

@bot.message_handler(commands=['advice'])
def advice(message):
    global current_image_index
    show_image(message, current_image_index)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global current_image_index
    
    if call.data == 'next':
        current_image_index += 1
    elif call.data == 'prev':
        current_image_index -= 1
    
    # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ !!! —Ç–∞–º –≥–¥–µ 9 - –Ω–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω–æ–≤
    current_image_index = max(0, min(current_image_index, 9))
    
    show_image(call.message, current_image_index)


bot.set_my_commands([
    types.BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    types.BotCommand("/help", "–ü–æ–º–æ—â—å"),
    types.BotCommand("/rules", "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
    types.BotCommand("/advice", "–°–æ–≤–µ—Ç—ã")
])
bot.infinity_polling()

"""—É–¥–∞–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏"""
